FEED_URL = 'http://udat.mtvnservices.com/service1/dispatch.htm?feed=nick_arc_player_prime&mgid=mgid:arc:video:nickjr.com:%s&plugin.stage=staging&site=nickjr'
NAMESPACES = {'media': 'http://search.yahoo.com/mrss/'}

RE_FIX_XML = Regex('(<!--.*?-->)')
RE_BITRATE = Regex('_(\d+)_?[^._]*\.mp4')

MediaObject.audio_channels = 2
MediaObject.optimized_for_streaming = True

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	xml = XML.ElementFromURL(FEED_URL % (url.split('://')[-1]))

	title = xml.xpath('//title/text()')[0]
	summary = xml.xpath('//description/text()')[0]
	thumb = xml.xpath('//media:thumbnail/@url', namespaces=NAMESPACES)

	if len(thumb) < 1:
		thumb = ''
	else:
		thumb = thumb[0]

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb)
	)

####################################################################################################
@deferred
def MediaObjectsForURL(url):

	mrss_data = HTTP.Request(FEED_URL % (url.split('://')[-1])).content
	mrss_data = RE_FIX_XML.sub('', mrss_data)
	mrss_data = XML.ElementFromString(mrss_data)

	media_urls = mrss_data.xpath('//media:content/@url', namespaces=NAMESPACES)

	available_streams = {}

	for media_url in media_urls:

		try:
			video_data = XML.ElementFromURL(media_url)
		except:
			raise Ex.MediaNotAvailable

		renditions = video_data.xpath('//rendition[@type="video/mp4"]')

		if len(renditions) < 1:
			raise Ex.MediaNotAvailable

		for rendition in renditions:

			if int(rendition.get('height')) < 360:
				continue

			rtmp_url = rendition.xpath('./src/text()')[0]

			if '.flv' in rtmp_url:
				continue

			bitrate = RE_BITRATE.search(rtmp_url).group(1)

			if bitrate not in available_streams:
				available_streams[bitrate] = []

			part = {}
			part['duration'] = rendition.get('duration')
			part['height'] = rendition.get('height')
			part['rtmp_url'] = rtmp_url

			available_streams[bitrate].append(part)

	media_objects = []
	bitrates = [int(i) for i in available_streams.keys()]
	bitrates.sort(reverse=True)

	for bitrate in bitrates:

		parts = []

		for part in available_streams[str(bitrate)]:

			parts.append(
				PartObject(
					key = RTMPVideoURL(
						url='rtmpe://viacommtvstrmfs.fplive.net:1935/viacommtvstrm',
						clip='mp4:%s' % (part['rtmp_url'].split('/viacomnickstrm/')[-1])
					),
					duration = int(part['duration'])*1000
				)
			)

			video_resolution = int(part['height'])

		media_objects.append(
			MediaObject(
				parts = parts,
				bitrate = bitrate,
				video_resolution = video_resolution
			)
		)

	return media_objects
